#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ ports = [31111, 31112, 31113]

#@ def labels():
app: #@ data.values.app_name
channel: dev-unstable
#@ end

#@ def foobar():
#@ if "namespace" in data.values:
#@   return {"namespace": data.values.namespace}
#@ else:
#@   return {}
#@ end
#@ end

#@ if/end "namespace" in data.values:
---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.namespace

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-app
  replace: #@ template.replace(foobar())
data:
  hello_msg: friend
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: simple-app-node
spec:
  type: NodePort
  ports:
    #@ for/end port in ports:
    - port: 80
      targetPort: 80
      nodePort: #@ port
  selector: #@ labels()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: simple-app
spec:
  selector:
    matchLabels: #@ labels()
  template:
    metadata:
      labels: #@ labels()
    spec:
      containers:
      - name: simple-app
        image: docker.io/dkalinin/k8s-simple-app@sha256:4c8b96d4fffdfae29258d94a22ae4ad1fe36139d47288b8960d9958d1e63a9d0
        env:
        - name: HELLO_MSG
          valueFrom:
            configMapKeyRef:
              name: simple-app
              key: hello_msg
